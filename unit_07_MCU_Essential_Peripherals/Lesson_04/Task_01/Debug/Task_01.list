
Task_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000c98  08000c98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb8  08000cb8  00010cc0  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb8  08000cb8  00010cc0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb8  08000cc0  00010cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000cc0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000cc0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e24  00000000  00000000  00010ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f3  00000000  00000000  00014b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009d8  00000000  00000000  00015500  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00015ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00016098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024b2  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002212  00000000  00000000  000186b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000093e7  00000000  00000000  0001a8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000550  00000000  00000000  00023d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c80 	.word	0x08000c80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c80 	.word	0x08000c80

08000170 <wait_ms>:
#include "lcd.h"

GPIO_PinConfig_t PinCfg;

void wait_ms(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for(j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for(i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_INIT>:

void LCD_INIT()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	/* important note: there are two methods to initialize the lcd 
	one is the standard and the only way to work it the internal reset circuit doesn't work well
	the second method is the methods implemented here and it works only if the internel reset circuit worked well */
	wait_ms(20);
 80001ac:	2014      	movs	r0, #20
 80001ae:	f7ff ffdf 	bl	8000170 <wait_ms>

	//EN, RS, RW input

	//EN
	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001b2:	4b40      	ldr	r3, [pc, #256]	; (80002b4 <LCD_INIT+0x10c>)
 80001b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001b8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ba:	4b3e      	ldr	r3, [pc, #248]	; (80002b4 <LCD_INIT+0x10c>)
 80001bc:	2204      	movs	r2, #4
 80001be:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80001c0:	4b3c      	ldr	r3, [pc, #240]	; (80002b4 <LCD_INIT+0x10c>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c6:	493b      	ldr	r1, [pc, #236]	; (80002b4 <LCD_INIT+0x10c>)
 80001c8:	483b      	ldr	r0, [pc, #236]	; (80002b8 <LCD_INIT+0x110>)
 80001ca:	f000 fc90 	bl	8000aee <MCAL_GPIO_Init>

	//RS
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001ce:	4b39      	ldr	r3, [pc, #228]	; (80002b4 <LCD_INIT+0x10c>)
 80001d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001d4:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001d6:	4937      	ldr	r1, [pc, #220]	; (80002b4 <LCD_INIT+0x10c>)
 80001d8:	4837      	ldr	r0, [pc, #220]	; (80002b8 <LCD_INIT+0x110>)
 80001da:	f000 fc88 	bl	8000aee <MCAL_GPIO_Init>

	//RW
	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001de:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <LCD_INIT+0x10c>)
 80001e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001e4:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001e6:	4933      	ldr	r1, [pc, #204]	; (80002b4 <LCD_INIT+0x10c>)
 80001e8:	4833      	ldr	r0, [pc, #204]	; (80002b8 <LCD_INIT+0x110>)
 80001ea:	f000 fc80 	bl	8000aee <MCAL_GPIO_Init>

//	wait_ms(15);

	/*          Data pin output 		*/
	//PA0 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80001ee:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <LCD_INIT+0x10c>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f4:	4b2f      	ldr	r3, [pc, #188]	; (80002b4 <LCD_INIT+0x10c>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80001fa:	4b2e      	ldr	r3, [pc, #184]	; (80002b4 <LCD_INIT+0x10c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000200:	492c      	ldr	r1, [pc, #176]	; (80002b4 <LCD_INIT+0x10c>)
 8000202:	482d      	ldr	r0, [pc, #180]	; (80002b8 <LCD_INIT+0x110>)
 8000204:	f000 fc73 	bl	8000aee <MCAL_GPIO_Init>

		//PA1 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000208:	4b2a      	ldr	r3, [pc, #168]	; (80002b4 <LCD_INIT+0x10c>)
 800020a:	2202      	movs	r2, #2
 800020c:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800020e:	4929      	ldr	r1, [pc, #164]	; (80002b4 <LCD_INIT+0x10c>)
 8000210:	4829      	ldr	r0, [pc, #164]	; (80002b8 <LCD_INIT+0x110>)
 8000212:	f000 fc6c 	bl	8000aee <MCAL_GPIO_Init>

	//PA2 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <LCD_INIT+0x10c>)
 8000218:	2204      	movs	r2, #4
 800021a:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800021c:	4925      	ldr	r1, [pc, #148]	; (80002b4 <LCD_INIT+0x10c>)
 800021e:	4826      	ldr	r0, [pc, #152]	; (80002b8 <LCD_INIT+0x110>)
 8000220:	f000 fc65 	bl	8000aee <MCAL_GPIO_Init>

	//PA3 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000224:	4b23      	ldr	r3, [pc, #140]	; (80002b4 <LCD_INIT+0x10c>)
 8000226:	2208      	movs	r2, #8
 8000228:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800022a:	4922      	ldr	r1, [pc, #136]	; (80002b4 <LCD_INIT+0x10c>)
 800022c:	4822      	ldr	r0, [pc, #136]	; (80002b8 <LCD_INIT+0x110>)
 800022e:	f000 fc5e 	bl	8000aee <MCAL_GPIO_Init>


	//PA4 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000232:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <LCD_INIT+0x10c>)
 8000234:	2210      	movs	r2, #16
 8000236:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000238:	491e      	ldr	r1, [pc, #120]	; (80002b4 <LCD_INIT+0x10c>)
 800023a:	481f      	ldr	r0, [pc, #124]	; (80002b8 <LCD_INIT+0x110>)
 800023c:	f000 fc57 	bl	8000aee <MCAL_GPIO_Init>

	//PA5 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000240:	4b1c      	ldr	r3, [pc, #112]	; (80002b4 <LCD_INIT+0x10c>)
 8000242:	2220      	movs	r2, #32
 8000244:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000246:	491b      	ldr	r1, [pc, #108]	; (80002b4 <LCD_INIT+0x10c>)
 8000248:	481b      	ldr	r0, [pc, #108]	; (80002b8 <LCD_INIT+0x110>)
 800024a:	f000 fc50 	bl	8000aee <MCAL_GPIO_Init>

	//PA6 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800024e:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <LCD_INIT+0x10c>)
 8000250:	2240      	movs	r2, #64	; 0x40
 8000252:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <LCD_INIT+0x10c>)
 8000256:	4818      	ldr	r0, [pc, #96]	; (80002b8 <LCD_INIT+0x110>)
 8000258:	f000 fc49 	bl	8000aee <MCAL_GPIO_Init>

	//PA7 output push pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <LCD_INIT+0x10c>)
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	801a      	strh	r2, [r3, #0]
//	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000262:	4914      	ldr	r1, [pc, #80]	; (80002b4 <LCD_INIT+0x10c>)
 8000264:	4814      	ldr	r0, [pc, #80]	; (80002b8 <LCD_INIT+0x110>)
 8000266:	f000 fc42 	bl	8000aee <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000270:	4811      	ldr	r0, [pc, #68]	; (80002b8 <LCD_INIT+0x110>)
 8000272:	f000 fcbb 	bl	8000bec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	480e      	ldr	r0, [pc, #56]	; (80002b8 <LCD_INIT+0x110>)
 800027e:	f000 fcb5 	bl	8000bec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000288:	480b      	ldr	r0, [pc, #44]	; (80002b8 <LCD_INIT+0x110>)
 800028a:	f000 fcaf 	bl	8000bec <MCAL_GPIO_WritePin>

	wait_ms(15);
 800028e:	200f      	movs	r0, #15
 8000290:	f7ff ff6e 	bl	8000170 <wait_ms>

	LCD_clear_screen();
 8000294:	f000 f898 	bl	80003c8 <LCD_clear_screen>
	
//	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000298:	2038      	movs	r0, #56	; 0x38
 800029a:	f000 f80f 	bl	80002bc <LCD_WRITE_COMMAND>
//	#ifdef FOUR_BIT_MODE
//	LCD_WRITE_COMMAND(0x02);
//	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
//	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800029e:	2006      	movs	r0, #6
 80002a0:	f000 f80c 	bl	80002bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80002a4:	2080      	movs	r0, #128	; 0x80
 80002a6:	f000 f809 	bl	80002bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80002aa:	200f      	movs	r0, #15
 80002ac:	f000 f806 	bl	80002bc <LCD_WRITE_COMMAND>
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000020 	.word	0x20000020
 80002b8:	40010800 	.word	0x40010800

080002bc <LCD_WRITE_COMMAND>:
void LCD_WRITE_COMMAND(unsigned char command)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
//	#ifdef EIGHT_BIT_MODE
//	LCD_check_lcd_isbusy();
//	LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_PORT, command);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	4619      	mov	r1, r3
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <LCD_WRITE_COMMAND+0x40>)
 80002ce:	f000 fca4 	bl	8000c1a <MCAL_GPIO_WritePort>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d8:	4808      	ldr	r0, [pc, #32]	; (80002fc <LCD_WRITE_COMMAND+0x40>)
 80002da:	f000 fc87 	bl	8000bec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <LCD_WRITE_COMMAND+0x40>)
 80002e6:	f000 fc81 	bl	8000bec <MCAL_GPIO_WritePin>

	wait_ms(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f7ff ff40 	bl	8000170 <wait_ms>
	LCD_lcd_kick();
 80002f0:	f000 f854 	bl	800039c <LCD_lcd_kick>
//	LCD_lcd_kick ();
//	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
//	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
//	LCD_lcd_kick();
//	#endif
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
//	#ifdef EIGHT_BIT_MODE
//	LCD_check_lcd_isbusy();
//	LCD_PORT = character;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	b29b      	uxth	r3, r3
 800030e:	4619      	mov	r1, r3
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <LCD_WRITE_CHAR+0x40>)
 8000312:	f000 fc82 	bl	8000c1a <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031c:	4808      	ldr	r0, [pc, #32]	; (8000340 <LCD_WRITE_CHAR+0x40>)
 800031e:	f000 fc65 	bl	8000bec <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <LCD_WRITE_CHAR+0x40>)
 800032a:	f000 fc5f 	bl	8000bec <MCAL_GPIO_WritePin>
	wait_ms(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff1e 	bl	8000170 <wait_ms>
	LCD_lcd_kick();
 8000334:	f000 f832 	bl	800039c <LCD_lcd_kick>
//	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
//	LCD_CTRL &= ~ (1<<RW_SWITCH);
//	LCD_CTRL |= (1<<RS_SWITCH);
//	LCD_lcd_kick();
//	#endif
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010800 	.word	0x40010800

08000344 <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char* string)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000350:	e01c      	b.n	800038c <LCD_WRITE_STRING+0x48>
		count++;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3301      	adds	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffcd 	bl	8000300 <LCD_WRITE_CHAR>
		if (count == 16)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b10      	cmp	r3, #16
 800036a:	d104      	bne.n	8000376 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 800036c:	2100      	movs	r1, #0
 800036e:	2002      	movs	r0, #2
 8000370:	f000 f831 	bl	80003d6 <LCD_GOTO_XY>
 8000374:	e00a      	b.n	800038c <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2b20      	cmp	r3, #32
 800037a:	d107      	bne.n	800038c <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 800037c:	f000 f824 	bl	80003c8 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000380:	2100      	movs	r1, #0
 8000382:	2001      	movs	r0, #1
 8000384:	f000 f827 	bl	80003d6 <LCD_GOTO_XY>
			count = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1de      	bne.n	8000352 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <LCD_lcd_kick>:
	LCD_lcd_kick();
//	DataDir_LCD_PORT |= (LCD_PORT<< DATA_shift);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
}
void LCD_lcd_kick(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	/* this method works as a pulse generator for the enable signal
	as in the rising edge of the signal the lcd read the command and in the falling edge it executes the command */ 
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <LCD_lcd_kick+0x28>)
 80003a8:	f000 fc20 	bl	8000bec <MCAL_GPIO_WritePin>
	wait_ms(50);
 80003ac:	2032      	movs	r0, #50	; 0x32
 80003ae:	f7ff fedf 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b8:	4802      	ldr	r0, [pc, #8]	; (80003c4 <LCD_lcd_kick+0x28>)
 80003ba:	f000 fc17 	bl	8000bec <MCAL_GPIO_WritePin>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40010800 	.word	0x40010800

080003c8 <LCD_clear_screen>:
void LCD_clear_screen()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f7ff ff75 	bl	80002bc <LCD_WRITE_COMMAND>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4603      	mov	r3, r0
 80003de:	460a      	mov	r2, r1
 80003e0:	71fb      	strb	r3, [r7, #7]
 80003e2:	4613      	mov	r3, r2
 80003e4:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d108      	bne.n	80003fe <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80003ec:	79bb      	ldrb	r3, [r7, #6]
 80003ee:	2b0f      	cmp	r3, #15
 80003f0:	d805      	bhi.n	80003fe <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	3b80      	subs	r3, #128	; 0x80
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff5f 	bl	80002bc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d108      	bne.n	8000416 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b0f      	cmp	r3, #15
 8000408:	d805      	bhi.n	8000416 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	3b40      	subs	r3, #64	; 0x40
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff53 	bl	80002bc <LCD_WRITE_COMMAND>
		}
	}
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <wait_ms_main>:


uint32_t  IRQ_Flag = 0;

void wait_ms_main(uint32_t time)
{
 800041e:	b480      	push	{r7}
 8000420:	b085      	sub	sp, #20
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i = 0; i < time; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e00b      	b.n	8000444 <wait_ms_main+0x26>
		for(j = 0; j < 255; j++);
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	e002      	b.n	8000438 <wait_ms_main+0x1a>
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	2bfe      	cmp	r3, #254	; 0xfe
 800043c:	d9f9      	bls.n	8000432 <wait_ms_main+0x14>
	for(i = 0; i < time; i++)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3ef      	bcc.n	800042c <wait_ms_main+0xe>
}
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
	...

08000458 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <EXTI9_Callback+0x1c>)
 800045e:	2201      	movs	r2, #1
 8000460:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 happened	");
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <EXTI9_Callback+0x20>)
 8000464:	f7ff ff6e 	bl	8000344 <LCD_WRITE_STRING>
	wait_ms_main(1000);
 8000468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046c:	f7ff ffd7 	bl	800041e <wait_ms_main>

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2000001c 	.word	0x2000001c
 8000478:	08000c98 	.word	0x08000c98

0800047c <main>:

int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
	// Enable Clock
	RCC_GPIOA_CLK_EN();
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <main+0x6c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <main+0x6c>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <main+0x6c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <main+0x6c>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <main+0x6c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <main+0x6c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 80004a6:	f7ff fe7f 	bl	80001a8 <LCD_INIT>
	LCD_clear_screen();
 80004aa:	f7ff ff8d 	bl	80003c8 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_CFG;

	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <main+0x70>)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <main+0x74>)
 80004be:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 80004c0:	2301      	movs	r3, #1
 80004c2:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f992 	bl	80007f0 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <main+0x78>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <main+0x78>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0fb      	beq.n	80004d2 <main+0x56>
		{
			LCD_clear_screen();
 80004da:	f7ff ff75 	bl	80003c8 <LCD_clear_screen>
			IRQ_Flag = 0;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <main+0x78>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80004e4:	e7f5      	b.n	80004d2 <main+0x56>
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	08000cac 	.word	0x08000cac
 80004f0:	08000459 	.word	0x08000459
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490d      	ldr	r1, [pc, #52]	; (8000538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0a      	ldr	r4, [pc, #40]	; (8000544 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000526:	f000 fb87 	bl	8000c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff ffa7 	bl	800047c <main>

0800052e <LoopForever>:

LoopForever:
    b LoopForever
 800052e:	e7fe      	b.n	800052e <LoopForever>
  ldr   r0, =_estack
 8000530:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800053c:	08000cc0 	.word	0x08000cc0
  ldr r2, =_sbss
 8000540:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000544:	20000060 	.word	0x20000060

08000548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_2_IRQHandler>
	...

0800054c <Enable_NVIC>:
 *										Generic Functions
 * ==================================================================================
 */

void Enable_NVIC(uint16_t IRQ)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d854      	bhi.n	8000606 <Enable_NVIC+0xba>
 800055c:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <Enable_NVIC+0x18>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	080005a5 	.word	0x080005a5
 8000568:	080005b3 	.word	0x080005b3
 800056c:	080005c1 	.word	0x080005c1
 8000570:	080005cf 	.word	0x080005cf
 8000574:	080005dd 	.word	0x080005dd
 8000578:	080005eb 	.word	0x080005eb
 800057c:	080005eb 	.word	0x080005eb
 8000580:	080005eb 	.word	0x080005eb
 8000584:	080005eb 	.word	0x080005eb
 8000588:	080005eb 	.word	0x080005eb
 800058c:	080005f9 	.word	0x080005f9
 8000590:	080005f9 	.word	0x080005f9
 8000594:	080005f9 	.word	0x080005f9
 8000598:	080005f9 	.word	0x080005f9
 800059c:	080005f9 	.word	0x080005f9
 80005a0:	080005f9 	.word	0x080005f9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <Enable_NVIC+0xc4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a19      	ldr	r2, [pc, #100]	; (8000610 <Enable_NVIC+0xc4>)
 80005aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ae:	6013      	str	r3, [r2, #0]
		break;
 80005b0:	e029      	b.n	8000606 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <Enable_NVIC+0xc4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <Enable_NVIC+0xc4>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6013      	str	r3, [r2, #0]
		break;
 80005be:	e022      	b.n	8000606 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <Enable_NVIC+0xc4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <Enable_NVIC+0xc4>)
 80005c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ca:	6013      	str	r3, [r2, #0]
		break;
 80005cc:	e01b      	b.n	8000606 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <Enable_NVIC+0xc4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <Enable_NVIC+0xc4>)
 80005d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d8:	6013      	str	r3, [r2, #0]
		break;
 80005da:	e014      	b.n	8000606 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <Enable_NVIC+0xc4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <Enable_NVIC+0xc4>)
 80005e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005e6:	6013      	str	r3, [r2, #0]
		break;
 80005e8:	e00d      	b.n	8000606 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <Enable_NVIC+0xc4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <Enable_NVIC+0xc4>)
 80005f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005f4:	6013      	str	r3, [r2, #0]
		break;
 80005f6:	e006      	b.n	8000606 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <Enable_NVIC+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <Enable_NVIC+0xc8>)
 80005fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000602:	6013      	str	r3, [r2, #0]
		break;
 8000604:	bf00      	nop

	}
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100
 8000614:	e000e104 	.word	0xe000e104

08000618 <Update_EXTI>:
	}
}


void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF Input -> Floating input
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000626:	2308      	movs	r3, #8
 8000628:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_port, &PinCfg);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa5a 	bl	8000aee <MCAL_GPIO_Init>
	//========================================================================

	//2- UPDATE AFIO to route between EXTI Line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_Index 	 = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	b29b      	uxth	r3, r3
 8000642:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	73bb      	strb	r3, [r7, #14]

	//clear the four bits
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 8000654:	4a5f      	ldr	r2, [pc, #380]	; (80007d4 <Update_EXTI+0x1bc>)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3302      	adds	r3, #2
 800065a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	210f      	movs	r1, #15
 8000662:	fa01 f303 	lsl.w	r3, r1, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	495a      	ldr	r1, [pc, #360]	; (80007d4 <Update_EXTI+0x1bc>)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	4002      	ands	r2, r0
 8000670:	3302      	adds	r3, #2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_Index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_port) & 0xF) << AFIO_EXTICR_Position);
 8000676:	4a57      	ldr	r2, [pc, #348]	; (80007d4 <Update_EXTI+0x1bc>)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3302      	adds	r3, #2
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4954      	ldr	r1, [pc, #336]	; (80007d8 <Update_EXTI+0x1c0>)
 8000686:	428b      	cmp	r3, r1
 8000688:	d016      	beq.n	80006b8 <Update_EXTI+0xa0>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4953      	ldr	r1, [pc, #332]	; (80007dc <Update_EXTI+0x1c4>)
 8000690:	428b      	cmp	r3, r1
 8000692:	d00f      	beq.n	80006b4 <Update_EXTI+0x9c>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4951      	ldr	r1, [pc, #324]	; (80007e0 <Update_EXTI+0x1c8>)
 800069a:	428b      	cmp	r3, r1
 800069c:	d008      	beq.n	80006b0 <Update_EXTI+0x98>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4950      	ldr	r1, [pc, #320]	; (80007e4 <Update_EXTI+0x1cc>)
 80006a4:	428b      	cmp	r3, r1
 80006a6:	d101      	bne.n	80006ac <Update_EXTI+0x94>
 80006a8:	2303      	movs	r3, #3
 80006aa:	e006      	b.n	80006ba <Update_EXTI+0xa2>
 80006ac:	2300      	movs	r3, #0
 80006ae:	e004      	b.n	80006ba <Update_EXTI+0xa2>
 80006b0:	2302      	movs	r3, #2
 80006b2:	e002      	b.n	80006ba <Update_EXTI+0xa2>
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <Update_EXTI+0xa2>
 80006b8:	2300      	movs	r3, #0
 80006ba:	7bb9      	ldrb	r1, [r7, #14]
 80006bc:	408b      	lsls	r3, r1
 80006be:	4618      	mov	r0, r3
 80006c0:	4944      	ldr	r1, [pc, #272]	; (80007d4 <Update_EXTI+0x1bc>)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4302      	orrs	r2, r0
 80006c6:	3302      	adds	r3, #2
 80006c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//========================================================================

	//3- Update Rising or falling register
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006cc:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <Update_EXTI+0x1d0>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	8812      	ldrh	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	2201      	movs	r2, #1
 80006d8:	408a      	lsls	r2, r1
 80006da:	43d2      	mvns	r2, r2
 80006dc:	4611      	mov	r1, r2
 80006de:	4a42      	ldr	r2, [pc, #264]	; (80007e8 <Update_EXTI+0x1d0>)
 80006e0:	400b      	ands	r3, r1
 80006e2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006e4:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <Update_EXTI+0x1d0>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a3c      	ldr	r2, [pc, #240]	; (80007e8 <Update_EXTI+0x1d0>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7b1b      	ldrb	r3, [r3, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10b      	bne.n	800071c <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <Update_EXTI+0x1d0>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	4611      	mov	r1, r2
 8000714:	4a34      	ldr	r2, [pc, #208]	; (80007e8 <Update_EXTI+0x1d0>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6093      	str	r3, [r2, #8]
 800071a:	e029      	b.n	8000770 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7b1b      	ldrb	r3, [r3, #12]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10b      	bne.n	800073c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <Update_EXTI+0x1d0>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <Update_EXTI+0x1d0>)
 8000736:	430b      	orrs	r3, r1
 8000738:	60d3      	str	r3, [r2, #12]
 800073a:	e019      	b.n	8000770 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISINGAndFALLING)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b1b      	ldrb	r3, [r3, #12]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d115      	bne.n	8000770 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <Update_EXTI+0x1d0>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	2201      	movs	r2, #1
 8000750:	408a      	lsls	r2, r1
 8000752:	4611      	mov	r1, r2
 8000754:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <Update_EXTI+0x1d0>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <Update_EXTI+0x1d0>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	8812      	ldrh	r2, [r2, #0]
 8000762:	4611      	mov	r1, r2
 8000764:	2201      	movs	r2, #1
 8000766:	408a      	lsls	r2, r1
 8000768:	4611      	mov	r1, r2
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <Update_EXTI+0x1d0>)
 800076c:	430b      	orrs	r3, r1
 800076e:	60d3      	str	r3, [r2, #12]
	}
	//========================================================================

	//4- Update IRQ Handling CALLBACK
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <Update_EXTI+0x1d4>)
 800077c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//========================================================================

	//5- Enable/ Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7b5b      	ldrb	r3, [r3, #13]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d110      	bne.n	80007aa <Update_EXTI+0x192>
	{
		EXTI->IMR	|= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <Update_EXTI+0x1d0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	8812      	ldrh	r2, [r2, #0]
 8000790:	4611      	mov	r1, r2
 8000792:	2201      	movs	r2, #1
 8000794:	408a      	lsls	r2, r1
 8000796:	4611      	mov	r1, r2
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <Update_EXTI+0x1d0>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fed2 	bl	800054c <Enable_NVIC>
	{
		EXTI->IMR	&= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 80007a8:	e010      	b.n	80007cc <Update_EXTI+0x1b4>
		EXTI->IMR	&= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <Update_EXTI+0x1d0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	4611      	mov	r1, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	408a      	lsls	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <Update_EXTI+0x1d0>)
 80007be:	400b      	ands	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fec0 	bl	800054c <Enable_NVIC>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40010000 	.word	0x40010000
 80007d8:	40010800 	.word	0x40010800
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40011000 	.word	0x40011000
 80007e4:	40011400 	.word	0x40011400
 80007e8:	40010400 	.word	0x40010400
 80007ec:	20000024 	.word	0x20000024

080007f0 <MCAL_EXTI_GPIO_Init>:
 * @retval 			- None
 * Note				- Enable RCC clock for AFIO and corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff0d 	bl	8000618 <Update_EXTI>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <EXTI0_IRQHandler>:
 * ==================================================================================
 * ==================================================================================
 */

void EXTI0_IRQHandler()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <EXTI0_IRQHandler+0x1c>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <EXTI0_IRQHandler+0x1c>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <EXTI0_IRQHandler+0x20>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4798      	blx	r3
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010400 	.word	0x40010400
 8000828:	20000024 	.word	0x20000024

0800082c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <EXTI1_IRQHandler+0x1c>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <EXTI1_IRQHandler+0x1c>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <EXTI1_IRQHandler+0x20>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4798      	blx	r3
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010400 	.word	0x40010400
 800084c:	20000024 	.word	0x20000024

08000850 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <EXTI2_IRQHandler+0x1c>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <EXTI2_IRQHandler+0x1c>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <EXTI2_IRQHandler+0x20>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	4798      	blx	r3
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010400 	.word	0x40010400
 8000870:	20000024 	.word	0x20000024

08000874 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <EXTI3_IRQHandler+0x1c>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <EXTI3_IRQHandler+0x1c>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <EXTI3_IRQHandler+0x20>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	4798      	blx	r3
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40010400 	.word	0x40010400
 8000894:	20000024 	.word	0x20000024

08000898 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <EXTI4_IRQHandler+0x1c>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <EXTI4_IRQHandler+0x1c>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <EXTI4_IRQHandler+0x20>)
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	4798      	blx	r3
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010400 	.word	0x40010400
 80008b8:	20000024 	.word	0x20000024

080008bc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();}
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d008      	beq.n	80008de <EXTI9_5_IRQHandler+0x22>
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	6153      	str	r3, [r2, #20]
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <EXTI9_5_IRQHandler+0xa4>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6);	GP_IRQ_CallBack[6]();}
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d008      	beq.n	80008fc <EXTI9_5_IRQHandler+0x40>
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a1b      	ldr	r2, [pc, #108]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <EXTI9_5_IRQHandler+0xa4>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7);	GP_IRQ_CallBack[7]();}
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000904:	2b00      	cmp	r3, #0
 8000906:	d008      	beq.n	800091a <EXTI9_5_IRQHandler+0x5e>
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 800090e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000912:	6153      	str	r3, [r2, #20]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <EXTI9_5_IRQHandler+0xa4>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8);	GP_IRQ_CallBack[8]();}
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000922:	2b00      	cmp	r3, #0
 8000924:	d008      	beq.n	8000938 <EXTI9_5_IRQHandler+0x7c>
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 800092c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <EXTI9_5_IRQHandler+0xa4>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9);	GP_IRQ_CallBack[9]();}
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <EXTI9_5_IRQHandler+0x9a>
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <EXTI9_5_IRQHandler+0xa0>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	6153      	str	r3, [r2, #20]
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <EXTI9_5_IRQHandler+0xa4>)
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	4798      	blx	r3
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010400 	.word	0x40010400
 8000960:	20000024 	.word	0x20000024

08000964 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10);	GP_IRQ_CallBack[10]();}
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <EXTI15_10_IRQHandler+0x22>
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097e:	6153      	str	r3, [r2, #20]
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <EXTI15_10_IRQHandler+0xc0>)
 8000982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000984:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11);	GP_IRQ_CallBack[11]();}
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098e:	2b00      	cmp	r3, #0
 8000990:	d008      	beq.n	80009a4 <EXTI15_10_IRQHandler+0x40>
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <EXTI15_10_IRQHandler+0xc0>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12);	GP_IRQ_CallBack[12]();}
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d008      	beq.n	80009c2 <EXTI15_10_IRQHandler+0x5e>
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ba:	6153      	str	r3, [r2, #20]
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <EXTI15_10_IRQHandler+0xc0>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13);	GP_IRQ_CallBack[13]();}
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d008      	beq.n	80009e0 <EXTI15_10_IRQHandler+0x7c>
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <EXTI15_10_IRQHandler+0xc0>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14);	GP_IRQ_CallBack[14]();}
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d008      	beq.n	80009fe <EXTI15_10_IRQHandler+0x9a>
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6153      	str	r3, [r2, #20]
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <EXTI15_10_IRQHandler+0xc0>)
 80009fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fc:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15);	GP_IRQ_CallBack[15]();}
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d008      	beq.n	8000a1c <EXTI15_10_IRQHandler+0xb8>
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <EXTI15_10_IRQHandler+0xbc>)
 8000a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <EXTI15_10_IRQHandler+0xc0>)
 8000a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1a:	4798      	blx	r3
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40010400 	.word	0x40010400
 8000a24:	20000024 	.word	0x20000024

08000a28 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_driver.h"

//*************************************************
static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	2b80      	cmp	r3, #128	; 0x80
 8000a36:	d042      	beq.n	8000abe <Get_CRLH_Position+0x96>
 8000a38:	2b80      	cmp	r3, #128	; 0x80
 8000a3a:	dc11      	bgt.n	8000a60 <Get_CRLH_Position+0x38>
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d036      	beq.n	8000aae <Get_CRLH_Position+0x86>
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	dc06      	bgt.n	8000a52 <Get_CRLH_Position+0x2a>
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d02e      	beq.n	8000aa6 <Get_CRLH_Position+0x7e>
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d02e      	beq.n	8000aaa <Get_CRLH_Position+0x82>
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d028      	beq.n	8000aa2 <Get_CRLH_Position+0x7a>
	case GPIO_PIN_15:
		return 28;
		break;

	default:
		break;
 8000a50:	e047      	b.n	8000ae2 <Get_CRLH_Position+0xba>
	switch (PinNumber)
 8000a52:	2b20      	cmp	r3, #32
 8000a54:	d02f      	beq.n	8000ab6 <Get_CRLH_Position+0x8e>
 8000a56:	2b40      	cmp	r3, #64	; 0x40
 8000a58:	d02f      	beq.n	8000aba <Get_CRLH_Position+0x92>
 8000a5a:	2b10      	cmp	r3, #16
 8000a5c:	d029      	beq.n	8000ab2 <Get_CRLH_Position+0x8a>
		break;
 8000a5e:	e040      	b.n	8000ae2 <Get_CRLH_Position+0xba>
	switch (PinNumber)
 8000a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a64:	d033      	beq.n	8000ace <Get_CRLH_Position+0xa6>
 8000a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a6a:	dc09      	bgt.n	8000a80 <Get_CRLH_Position+0x58>
 8000a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a70:	d029      	beq.n	8000ac6 <Get_CRLH_Position+0x9e>
 8000a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a76:	d028      	beq.n	8000aca <Get_CRLH_Position+0xa2>
 8000a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a7c:	d021      	beq.n	8000ac2 <Get_CRLH_Position+0x9a>
		break;
 8000a7e:	e030      	b.n	8000ae2 <Get_CRLH_Position+0xba>
	switch (PinNumber)
 8000a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a84:	d027      	beq.n	8000ad6 <Get_CRLH_Position+0xae>
 8000a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8a:	dc03      	bgt.n	8000a94 <Get_CRLH_Position+0x6c>
 8000a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a90:	d01f      	beq.n	8000ad2 <Get_CRLH_Position+0xaa>
		break;
 8000a92:	e026      	b.n	8000ae2 <Get_CRLH_Position+0xba>
	switch (PinNumber)
 8000a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a98:	d01f      	beq.n	8000ada <Get_CRLH_Position+0xb2>
 8000a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a9e:	d01e      	beq.n	8000ade <Get_CRLH_Position+0xb6>
		break;
 8000aa0:	e01f      	b.n	8000ae2 <Get_CRLH_Position+0xba>
		return 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e01e      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	e01c      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 8;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	e01a      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 12;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	e018      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 16;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	e016      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 20;
 8000ab6:	2314      	movs	r3, #20
 8000ab8:	e014      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 24;
 8000aba:	2318      	movs	r3, #24
 8000abc:	e012      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 28;
 8000abe:	231c      	movs	r3, #28
 8000ac0:	e010      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e00e      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e00c      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 8;
 8000aca:	2308      	movs	r3, #8
 8000acc:	e00a      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 12;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	e008      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 16;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	e006      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 20;
 8000ad6:	2314      	movs	r3, #20
 8000ad8:	e004      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 24;
 8000ada:	2318      	movs	r3, #24
 8000adc:	e002      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
		return 28;
 8000ade:	231c      	movs	r3, #28
 8000ae0:	e000      	b.n	8000ae4 <Get_CRLH_Position+0xbc>
	}
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <MCAL_GPIO_Init>:
 * @retval 			- None
 * Note				- Stm32F103C6 MCU has GPIO A, B, C, D Modules
 * 					  But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINs from the Module
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000aee:	b590      	push	{r4, r7, lr}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
	//this variable is used to store the address of CRL or CRH depending on the number of pin
	volatile uint32_t * config_register = NULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]

	//this variable hold the value of both CNF and MODE bits of the pin to be configured
	uint8_t pin_Config = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

	//in the next line config_register will either has address of CRL or CRH
	config_register = (PinConfig->GPIO_PinNumber > GPIO_PIN_7) ? &GPIOx->CRH: &GPIOx->CRL ;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b80      	cmp	r3, #128	; 0x80
 8000b06:	d902      	bls.n	8000b0e <MCAL_GPIO_Init+0x20>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	e000      	b.n	8000b10 <MCAL_GPIO_Init+0x22>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]

	//clearing CNF and MODE bits in order to change them to the configuration we want later
	(*config_register) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff86 	bl	8000a28 <Get_CRLH_Position>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	230f      	movs	r3, #15
 8000b22:	4093      	lsls	r3, r2
 8000b24:	43da      	mvns	r2, r3
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	601a      	str	r2, [r3, #0]

	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d00b      	beq.n	8000b50 <MCAL_GPIO_Init+0x62>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	789b      	ldrb	r3, [r3, #2]
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	d007      	beq.n	8000b50 <MCAL_GPIO_Init+0x62>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	d003      	beq.n	8000b50 <MCAL_GPIO_Init+0x62>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d10e      	bne.n	8000b6e <MCAL_GPIO_Init+0x80>
	{
		pin_Config = (((PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_OUTPUT_Speed) & 0x0f;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	3b04      	subs	r3, #4
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	b25a      	sxtb	r2, r3
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	78db      	ldrb	r3, [r3, #3]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e02c      	b.n	8000bc8 <MCAL_GPIO_Init+0xda>
	}
	else
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <MCAL_GPIO_Init+0x90>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d107      	bne.n	8000b8e <MCAL_GPIO_Init+0xa0>
		{
			pin_Config = ((PinConfig->GPIO_MODE << 2) | 0x0) & 0x0f;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	789b      	ldrb	r3, [r3, #2]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e01c      	b.n	8000bc8 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d102      	bne.n	8000b9c <MCAL_GPIO_Init+0xae>
		{
			pin_Config = ((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0f;
 8000b96:	2304      	movs	r3, #4
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e015      	b.n	8000bc8 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			pin_Config = ((GPIO_MODE_INPUT_PD << 2) | 0x0) & 0x0f;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	789b      	ldrb	r3, [r3, #2]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d107      	bne.n	8000bb8 <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	e007      	b.n	8000bc8 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	8812      	ldrh	r2, [r2, #0]
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= ((pin_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000bc8:	7bfc      	ldrb	r4, [r7, #15]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff2a 	bl	8000a28 <Get_CRLH_Position>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	fa04 f203 	lsl.w	r2, r4, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}

08000bec <MCAL_GPIO_WritePin>:
 * @param [in] 		- Value: Pin value
 * @retval 			- None
 * Note				- None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx, uint16_t PinNumber,uint8_t value)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <MCAL_GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000c08:	e002      	b.n	8000c10 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	615a      	str	r2, [r3, #20]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <MCAL_GPIO_WritePort>:
 * @param [in] 		- Value: Port value
 * @retval 			- None
 * Note				- None
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef * GPIOx, uint16_t value)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60da      	str	r2, [r3, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
	...

08000c38 <__libc_init_array>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	4e0c      	ldr	r6, [pc, #48]	; (8000c70 <__libc_init_array+0x38>)
 8000c3e:	4c0d      	ldr	r4, [pc, #52]	; (8000c74 <__libc_init_array+0x3c>)
 8000c40:	1ba4      	subs	r4, r4, r6
 8000c42:	10a4      	asrs	r4, r4, #2
 8000c44:	42a5      	cmp	r5, r4
 8000c46:	d109      	bne.n	8000c5c <__libc_init_array+0x24>
 8000c48:	f000 f81a 	bl	8000c80 <_init>
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	4e0a      	ldr	r6, [pc, #40]	; (8000c78 <__libc_init_array+0x40>)
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <__libc_init_array+0x44>)
 8000c52:	1ba4      	subs	r4, r4, r6
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	42a5      	cmp	r5, r4
 8000c58:	d105      	bne.n	8000c66 <__libc_init_array+0x2e>
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c60:	4798      	blx	r3
 8000c62:	3501      	adds	r5, #1
 8000c64:	e7ee      	b.n	8000c44 <__libc_init_array+0xc>
 8000c66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6a:	4798      	blx	r3
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	e7f2      	b.n	8000c56 <__libc_init_array+0x1e>
 8000c70:	08000cb8 	.word	0x08000cb8
 8000c74:	08000cb8 	.word	0x08000cb8
 8000c78:	08000cb8 	.word	0x08000cb8
 8000c7c:	08000cbc 	.word	0x08000cbc

08000c80 <_init>:
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	bf00      	nop
 8000c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c86:	bc08      	pop	{r3}
 8000c88:	469e      	mov	lr, r3
 8000c8a:	4770      	bx	lr

08000c8c <_fini>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr
